import streamlit as st
import requests
import io
from PIL import Image
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Food Classification",
    page_icon="üçï",
    layout="centered"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üçï Food Classification")
st.markdown("Upload an image of food to classify it into one of the categories")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π URL
API_URL = "http://host.docker.internal:8000"

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def classify_image(image_bytes):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        files = {"file": ("image.jpg", image_bytes, "image/jpeg")}
        response = requests.post(f"{API_URL}/predict", files=files, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"API Error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Error: {str(e)}")
        return None

def main():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    st.sidebar.info(f"API URL: `{API_URL}`")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    with st.spinner("Checking API connection..."):
        api_available = check_api_health()
    
    if not api_available:
        st.error(f"‚ö†Ô∏è Classification API is not available at {API_URL}")
        return

    st.success("‚úÖ API is available and connected!")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    uploaded_file = st.file_uploader(
        "Choose a food image", 
        type=["jpg", "jpeg", "png"],
        help="Upload an image of food (max 10MB)"
    )
    
    if uploaded_file is not None:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if uploaded_file.size > 10 * 1024 * 1024:
            st.error("File size too large. Please upload an image smaller than 10MB.")
            return
        
        # –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        if st.button("Classify Food", type="primary"):
            with st.spinner("Analyzing image..."):
                # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ bytes
                image_bytes = uploaded_file.getvalue()
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
                result = classify_image(image_bytes)
                
                if result:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success("Classification completed!")
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    col1, col2 = st.columns([2, 1])
                    with col1:
                        st.metric(
                            label="Predicted Class", 
                            value=result["prediction"].upper(),
                            delta=f"{result['confidence']:.1%} confidence"
                        )
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                    with st.expander("View detailed probabilities"):
                        for class_name, prob in result["all_predictions"].items():
                            st.progress(prob, text=f"{class_name}: {prob:.1%}")

if __name__ == "__main__":
    main()